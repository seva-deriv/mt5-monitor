SET(CMAKE_SYSTEM_NAME Windows)

INCLUDE(${CMAKE_CURRENT_LIST_DIR}/MaybeGetFromEnv.cmake)
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/user.cmake OPTIONAL)  # Allow user.cmake to setup cross-compilation

MaybeGetFromEnv(LLVM_VER)
MaybeGetFromEnv(LLVM_VERSION)
IF (LLVM_VER)
    SET(_LLVM_SUFFIX -${LLVM_VER})
ENDIF ()
SET(CMAKE_C_COMPILER  clang-cl${_LLVM_SUFFIX})
SET(CMAKE_CXX_COMPILER clang-cl${_LLVM_SUFFIX})
SET(CMAKE_RC_COMPILER llvm-rc${_LLVM_SUFFIX})
find_program(_LLVM_MT NAMES llvm-mt${_LLVM_SUFFIX} mt)  # Use MS mt, if llvm-mt is not available
SET(CMAKE_MT ${_LLVM_MT})
SET(CMAKE_LINKER lld-link${_LLVM_SUFFIX})

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHa -w")
IF (NOT CMAKE_HOST_WIN32)
    SET(CMAKE_CROSSCOMPILING_EMULATOR wine)
ENDIF ()

MaybeGetFromEnv(XWIN_PREFIX)
MaybeGetFromEnv(LLVM_PREFIX)

IF (XWIN_PREFIX)
    INCLUDE(${CMAKE_CURRENT_LIST_DIR}/xwin.cmake)
ENDIF ()

IF (LLVM_PREFIX)
    SET(_AUX_LINK_FLAGS "\
        /libpath:\"${LLVM_PREFIX}/lib/clang/${LLVM_VERSION}/lib/windows\" \
        clang_rt.profile-x86_64.lib \
    ")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${_AUX_LINK_FLAGS}")
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${_AUX_LINK_FLAGS}")
    SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${_AUX_LINK_FLAGS}")
ENDIF ()
